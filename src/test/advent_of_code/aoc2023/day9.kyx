let lines = readinput();

fn parse(history: string) -> [int] {
	let mut r = vec<int>{};

	for v : history.split_whitespace() {
		r.push(v.to_integer());
	}
	return r;
}

fn is_all_zero(history: [int]) -> bool {
	for h : history {
		if h != 0 {
			return false;
		}
	}
	return true;
}

fn reverse(history: [int]) -> [int] {
	let mut v = vec<int>{};
	for i : (history.len()-1)..=>0 {
		v.push(history[i]);	
	}
	return v;
}

fn process(history: [int]) -> int {
	let mut tails = vec<int>{};

	let mut current = history;
	tails.push(current[current.len()-1]);

	while !is_all_zero(current) {
		let mut v = vec<int>{};
		for c : 0..(current.len()-1) {
			v.push(current[c+1] - current[c]);
		}
		tails.push(v[v.len()-1]);
		current = v;
	}

	let mut next = 0;
	for i : (tails.len()-2)..=>0 {
		next = tails[i] + next;
	}

	return next;
}

let mut histories = vec<[int]>{};
for ln : lines {
	histories.push(parse(ln));
}

let mut sum = 0;
for h : histories {
	sum = sum + process(h);
}
print(sum);

sum = 0;
for h : histories {
	sum = sum + process(reverse(h));
}
print(sum);

