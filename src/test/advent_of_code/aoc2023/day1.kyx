let lines = readinput();

let words = vec<string>{"one", "two", "three", "four", "five", "six", "seven", "eight", "nine"};

union Number {
	Value(int),
	None,
}

fn get_word_value(str: string, part2: bool) -> Number {
	if str[0].is_digit() {
		return Number.Value(str[0].to_integer(),);
	}

	if part2 {
		for i : 0..words.len() {
			if str.starts_with(words[i]) {
				return Number.Value(i + 1,);
			}
		}
	}

	return Number.None;
}

fn get_number(str: string, part2: bool) -> int {
	let mut first = 0;
	let mut last = 0;

	for i : 0..str.len() {
		if let Number.Value(v,) = get_word_value(str[i..], part2) {
			first = v;
			break;
		}
	}

	for i : (str.len()-1)..=>0 {
		if let Number.Value(v,) = get_word_value(str[i..], part2) {
			last = v;
			break;
		}
	}

	return first * 10 + last;
}

fn get_total(part2: bool) -> int {
	let mut total = 0;
	for i : 0..lines.len() {
		total = total + get_number(lines[i], part2);
	}
	return total;
}

print(get_total(false));
print(get_total(true));

