let lines: [string] = readinput();

struct Event {
	time: int,
	desc: string,
}

fn parse_time(s: string) -> int {
	let date_time: string = s.split(']')[0][1..];

	let month: string = date_time[5..7];
	let day: string = date_time[8..10];

	let hour: string = date_time[11..13];
	let minute: string = date_time[14..];

	let seconds: int = (43200 * month.to_integer()) + (1440 * day.to_integer()) + minute.to_integer();
	return seconds;
}

let mut events: [Event] = vec<Event>{};

for i : 0..lines.len() {
	events.push(Event {
		time = parse_time(lines[i]),
		desc = lines[i].split(']')[1][1..],
	});
}

fn pred(a: Event, b: Event) -> bool {
	return a.time < b.time;
}
events.sort(pred);

struct Guard {
	minutes_asleep: int,
	minutes_awake: [int],
}

let mut guards: [int: Guard] = hash_map<int, Guard>{};
let mut current_id: int = -1;
let mut current_time: int = -1;
let mut is_awake: bool = true;
for i : 0..events.len() {
	let evt: Event = events[i];
	let desc: string = evt.desc;
	if desc.contains("Guard") {
		if !is_awake {
			if current_id != -1 {
				let mut g: Guard = guards[current_id];
				g.minutes_asleep = g.minutes_asleep + (evt.time - current_time);
				for t : current_time..evt.time {
					let m: int = t % 60;
					g.minutes_awake[m] = g.minutes_awake[m] + 1;
				}
			}
		}

		is_awake = true;
		current_time = evt.time;	
		current_id = desc[7..].split(' ')[0].to_integer();

		if !guards.contains_key(current_id) {
			let mut mm: [int] = vec<int>{};
			for a : 0..60 {
				mm.push(0);
			}

			guards[current_id] = Guard {
				minutes_asleep = 0,
				minutes_awake = mm,
			};
		}
	}
	else {
		if desc.contains("asleep") {
			is_awake = false;

			current_time = evt.time;

		}
		else {
			is_awake = true;

			let mut g: Guard = guards[current_id];
			g.minutes_asleep = g.minutes_asleep + (evt.time - current_time);
			for t : current_time..evt.time {
				let m: int = t % 60;
				g.minutes_awake[m] = g.minutes_awake[m] + 1;
			}

			current_time = evt.time;
		}
	}
}

let keys: [int] = guards.keys();
// part 1
{

	let mut highest_minutes: int = -1;
	let mut highest_id: int = -1;
	for i : 0..keys.len() {
		let k: int = keys[i];
		if guards[k].minutes_asleep > highest_minutes {
			highest_minutes = guards[k].minutes_asleep;
			highest_id = k;
		}
	}

	let g: Guard = guards[highest_id];
	let mut m: [int] = g.minutes_awake;

	let mut most_minute_idx: int = 0;
	let mut most_minute_val: int = m[0];

	for i : 1..m.len() {
		if m[i] > most_minute_val {
			most_minute_val = m[i];
			most_minute_idx = i;
		}
	}
	print(highest_id * most_minute_idx);
}


// part 2
{
	
	let mut most_minute_idx: int = -1;
	let mut most_minute_val: int = -1;
	let mut highest_id: int = -1;
	for i : 0..keys.len() {
		let mut m: [int] = guards[keys[i]].minutes_awake;
		let mut guard_most_minute_idx: int = 0;
		let mut guard_most_minute_val: int = m[0];

		for i : 1..m.len() {
			if m[i] > guard_most_minute_val {
				guard_most_minute_val = m[i];
				guard_most_minute_idx = i;
			}
		}
		
		if guard_most_minute_val > most_minute_val {
			most_minute_val = guard_most_minute_val;
			most_minute_idx = guard_most_minute_idx;
			highest_id = keys[i];
		}
	}

	print(highest_id * most_minute_idx);
}
