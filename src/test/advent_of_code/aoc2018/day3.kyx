let lines: [string] = readinput();

let mut map: [int: [int: int]] = hash_map<int, [int: int]>{};

for i : 0..lines.len() {
	let l: string = lines[i][1..];
	let vid: [string] = l.split('@');
	let vcoord: [string] = vid[1].split(':');

	let id: string = vid[0].trim();
	let scoord: string = vcoord[0].trim();
	let coord: [string] = scoord.split(',');
	let sarea: string = vcoord[1].trim();
	let area: [string] = sarea.split('x');

	let start_x: int = coord[0].to_integer();
	let start_y: int = coord[1].to_integer();

	let ax: int = area[0].to_integer();
	let ay: int = area[1].to_integer();

	let end_x: int = start_x + ax;
	let end_y: int = start_y + ay;

	for x : start_x..end_x {
		for y : start_y..end_y {
			if !map.contains_key(x) {
				map[x] = hash_map<int, int>{};
			}

			let mut mapx: [int: int] = map[x];
			if mapx.contains_key(y) {
				let count: int = mapx[y] + 1;
				mapx[y] = count;
			}
			else {
				mapx[y] = 1;
			}
		}
	}
}

let mut overlapping_claims: int = 0;
let xkeys: [int] = map.keys();

for ix : 0..xkeys.len() {
	let mapx: [int: int] = map[xkeys[ix]];
	let ykeys: [int] = mapx.keys();

	for iy : 0..ykeys.len() {
		if mapx[ykeys[iy]] > 1 {
			overlapping_claims = overlapping_claims + 1;
		}
	}
}

// part 1
print(overlapping_claims);

union R {
	Overlapped,
	NotOverlapped(string),
}

fn is_overlapped(line: string) -> R {
	let l: string = line[1..];
	let vid: [string] = l.split('@');
	let vcoord: [string] = vid[1].split(':');

	let id: string = vid[0].trim();
	let scoord: string = vcoord[0].trim();
	let coord: [string] = scoord.split(',');
	let sarea: string = vcoord[1].trim();
	let area: [string] = sarea.split('x');

	let start_x: int = coord[0].to_integer();
	let start_y: int = coord[1].to_integer();

	let ax: int = area[0].to_integer();
	let ay: int = area[1].to_integer();

	let end_x: int = start_x + ax;
	let end_y: int = start_y + ay;

	for x : start_x..end_x {
		for y : start_y..end_y {
			let mut mapx: [int: int] = map[x];
			if mapx[y] > 1 {
				return R.Overlapped;
			}
		}
	}

	return R.NotOverlapped(id,);
}

// part 2
for i : 0..lines.len() {
	if let R.NotOverlapped(id,) = is_overlapped(lines[i]) {
		print(id);
	}
}
